多线程示例：
多线程之间的交互
    1、//线程之间的交互，其中一个方式
    public class MyThread extends Thread {
        private int num=5;
        synchronized public void run(){
            num--;
            System.out.println("name:"+Thread.currentThread().getName()+"||num:"+num);
        }
    }
              MyThread myThread=new MyThread();
              Thread a=new Thread(myThread,"A");
              Thread b=new Thread(myThread,"B");
              Thread c=new Thread(myThread,"C");
              Thread d=new Thread(myThread,"D");
              Thread e=new Thread(myThread,"E");
              a.start();
              b.start();
              c.start();
              d.start();
              e.start();  //会逐步执行num值，因为线程对象是同一个myThread
Thread类的isAlive()方法判断当前线程是否处于活跃状态
currentThread()方法返回当前执行这段代码的线程信息
getId()方法的作用是取得线程唯一的标识
synchronized加载方法上是使方法的操作具有原子性
【】终止线程有三种方法：1、线程正常的停止 2、interrupt
停止一个线程可以使用Thread.interrupt(),终止停止。
这个方法并不会终止一个正在运行的线程，还需加入一个判断才可以完成线程的终止.
    使用interrupt并不能立即终止当前正在执行的线程，仅是在当前线程打了一个终止的符号，线程不是真的终止

    两种方式测试线程是否已经终止
    static this.interrupted()//测试当前线程是否已经中断。执行完成后并把当前线程状态清楚的功能(再次调用会返回false)
    this.isInterrupted() 测试线程是否已经中断。不会清除线程的状态

    MyThread thread=new MyThread();
    thread.start();
    thread.interrupt();
    System.out.println("thread 1:"+thread.interrupted());//false返回的是当前的main线程是否终止，而不是thread线程
    System.out.println("thread 2:"+thread.isInterrupted());//true  线程thread是否已经停止

所以停止线程加个判断当前线程是否停止
    public void run(){
        for(){
            if(this.isInterrupted())//则停止之后的代码执行
                break;//仅是停止for里的代码执行
            throw new Exception();
        }
        //想停止他可以在前面扔出一个异常对象
    }

    沉睡线程终止会抛出一个线程中断异常，并清除终止线程的状态，这个需要注意
    不适用stop来强行终止线程，但不安全，已弃用
【】暂停线程
    使用suspend来暂停线程，使用resume来恢复线程
    缺点：极易造成公共对象的独占，导致其他线程访问不到这个对象，发生死锁
    例如：
    MyThread thread=new MyThread();//这个线程中有println()方法的输出
    thread.start();
    Thread.sleep(100);
    thread.suspend();
    System.out.println("thread end");//运行，这个就永远不会输出。
    【】为什么只是暂停了thread线程，与这个main线程有什么关系呢？
    因为println()源码中有加锁的代码块，导致这个锁一直是暂停状态，得不到释放。
    所以这两个方法才会被舍弃，很容易造成死锁
    也会导致线程数据不同步
【】yield()放弃当前线程的CPU，让CPU去执行其他的线程,会使当前线程执行时间加长。
    终止CPU当前时间片的执行。
【】可以设置线程的优先级setPriority();//1-10  小于1或者大于10将会抛出异常
    线程优先级具有继承特性，随机性。CPU尽量将资源交给优先级较高的线程执行
================================================
volatile关键字的使用
示例：
public class T1 implements Runnable {
    private Boolean isAc=true;

    public Boolean getAc() {
        return isAc;
    }

    public void setAc(Boolean ac) {
        isAc = ac;
    }

    @Override
    public void run() {
        while (isAc){
            System.out.println("run main");
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
会出现一种死循环：当jvm被设置为-server模式时，为了提高效率，jvm会一直从线程私有方法堆中取这个isAc的值
                当我们把这个值使用set方法来进行重新设置时，只是设置的对象堆中的isAc值。所以会有死循环
volatile关键字的作用就是当线程访问一个变量时强制从公共堆中取值。
但他最致命的弱点是不支持原子性，只能保证数据的可见性
原子类AtomicInteger可以在没有锁的情况下保证线程安全(单步操作是原子的，并不是多个操作之间是原子的)
例如：1、count.incrementAndGet();//自增加1
        2、addAndGet(10);//加10
        1/2之间并不是原子性的，仅1或者2本身是原子性的



【】线程之间的通信
【1】wait()/notify() 等待/通知机制
    wait方法使当前执行代码的线程进行等待。在使用该wait方法之前，该线程必须获取到该对象的对象级别锁
        会立即释放掉共享资源的锁，notify不会被立即释放锁。wait必须被notify唤醒，否则一直等待下去
        ---只能在同步方法和同步代码块中使用该方法。notify方法也是
    notify用来通知可能等待该对象的对象锁的其他线程。有多个会随机挑选一个。
        在这行notify方法之后，当前线程不会马上释放该对象锁，wait也不会马上获取。需等到当前线程退出代码块时才可以获得到

        wait使线程停止运行，锁被自动释放，notify使停止的线程继续执行
        执行wait之后，其后面的代码就不执行了，当前线程就暂停了
    lock.wait(3000);//超过3秒自动唤醒
    注意：当notify唤醒wait之后，是继续执行wait(暂停点)之后的代码，而不是从头开始执行wait的代码
    使用wait和notify容易出现假死状态。假死状态就是唤醒了同类。解决办法是全部唤醒，不光唤醒一个
    示例问题：当wait和notify不止一个时(例如生产者和消费者不止一个时，再使用notify方法很容易出现假死的一个状态，
            解决办法就是使用notifyAll方法全部唤醒)
【2】通过管道流进行线程之间的通信
    必须要以线程来实现
        //字节流
        PipedOutputStream out=new PipedOutputStream();
        PipedInputStream read=new PipedInputStream();
        out.connect(read);//输入输出管道必须连接上才能一个生产一个消费
        //字符流
        PipedReader reader=new PipedReader();
        PipedWriter writer=new PipedWriter();
【join】等待线程对象销毁
    就是使所属线程对象正常执行，而使当前线程无限等待，直到所属线程执行完毕再执行后面的代码
    System.out.println("main start");
    Thread join = new Thread(new JoinThread());
    join.start();
    join.join();
    System.out.println("main end");//join和interrupt使用会出现异常
【ThreadLocal】
    不同的线程中的值可以放到这个中保存起来，而其他线程获取不到。
    当前线程只能获取到本线程放到里面的数据，而其他线程获取不到，他也获取不到其他线程的值。
    具有隔离性==(get/set操作)
    想使开始就可以获取到初始值，自己必须实现ThreadLocal类并覆盖initialValue方法来返回指定值
【InheritableThreadLocal】可以使子线程获取到父线程继承下来的值，基本操作和ThreadLocal一样，就是性质不一样

【】ReentrantLock
    实现等待通知的功能
    使用Condition来实现
    await/signal和wait/nitify具体怎么结束的相似
    await也是和wait一样执行到它立即释放锁，唤醒之后再接着执行其后的代码
    signalAll也是唤醒所有的等待，这些等待是并发执行(相当于都唤醒了)跟notifyAll一样  ===没有多大的优势

    正常的使用：唤醒指定等待的线程
    不同的Condition对象只能唤醒由相同对象await/signal的线程---这就是释放指定的线程
    private Condition condition = lock.newCondition();
    private Condition conditionB=lock.newCondition();
    conditionB.await();
    condition.await();
    condition.signal();//仅会释放condition等待的线程


    Lock具有公平锁和不公平锁之分
    ReentrantLock(boolean) //true公平
    先start启动的线程获取锁对象基本都是先到先得，否则是随机指定(先启动的不一定先得到锁对象)
    方法getHoldCount获取当前线程使用该锁对象的个数
【】ReentrantReadWriteLock 读写锁 有两种锁：读锁(共享锁)+写锁(排它锁)
    读读锁之间不互斥，读写互斥，写写互斥
    ReentrantReadWriteLock.ReadLock readLock = readWriteLock.readLock();//获取读锁
    ReentrantReadWriteLock.WriteLock writeLock = readWriteLock.writeLock();//获取写锁
【】Timer
    Timer timer=new Timer(true);//为true是守护进程，指定时间执行完就会关闭线程。否会一直执行
    同一个Timer对象中允许有多个TimerTask任务。是放到一个队列中由同一个线程顺序执行的，会受前一个执行时间的影响
    所以定时任务的延迟也是放到一个队列中由线程取出执行的
【】实现单利
【】获取线程的当前状态
     MyThread myThread=new MyThread();
     myThread.start();
     Thread.State state = myThread.getState();
【】线程组
    ThreadGroup group=new ThreadGroup("rock");
    ThreadA a=new ThreadA();
    ThreadB b=new ThreadB();
    //把对象加入到线程组中
    Thread at=new Thread(group,a);
    Thread bt=new Thread(group,b);

    //线程组可以批量停止其中的线程