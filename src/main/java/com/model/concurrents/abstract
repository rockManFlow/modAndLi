多线程并发包有三个
java.util.concurrent：构造的一些高级工具，比如线程池和并发队列等
locks：基本的锁实现，最重要的aqs框架和lockSupport
atomic：原子数据的构件


concurrent：
java.util.concurrent.Executors 提供了构造不同线程池的静态方法---静态线程池，单一工作线程池，缓存线程池等
    Executors这个类中构造了有三个固定线程池的静态方法
    ExecutorService executorService1 = Executors.newSingleThreadExecutor();

    ExecutorService executorService2 = Executors.newFixedThreadPool(10);

    ExecutorService executorService3 = Executors.newScheduledThreadPool(10);

接口 Executor  ---只有一个方法execute(Runnable command)  执行已提交的Runnable任务的对象

接口 ExecutorService   ---是对Executor的扩展
    提供了一个管理关闭线程的方法和提交submit()任务，并返回Future结果

接口 Callable就是带返回结果的多线程接口，和Runnable接口是一个等级，只是带返回结果

接口 Future  对于已提交任务状态的一个判断 如：取消/获取任务的执行结果，判断任务执行状况 相当于一个线程执行结果接口

接口 RunnableFuture 继承了Runnable和Future接口  只有一个方法run()
    他的实现类是FutureTask ---可取消/获得当前线程的结果,就是可以操作当前线程
    可处理多线程结果的一个类，FutureTask可获取Callable和Runnable多线程的返回结果

locks:
ReentrantLock 的使用必须是多个线程使用同一个线程锁对象，否则是没用的 ：相当于同步锁
    可重入锁：在一个锁之内也可以再加锁